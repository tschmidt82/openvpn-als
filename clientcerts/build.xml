<?xml version="1.0" encoding="UTF-8"?>
<project name="clientcerts" default="dist">
	
	<property file="../build.properties"/>

	<!-- Standard build locations -->
	<!-- TODO: Add these to global build.properties -->
	<property name="build.output.instrumented" value="${dir.build}/instrumented"/>
	<property name="build.output.test" value="${dir.build}/test"/>
	<property name="build.test.src" value="test/src"/>
	<property name="build.webapp" value="webapp"/>
	<property name="build.serverlib" value="../adito/serverlib" />
	
	<!-- Dependencies -->
	<!-- TODO: Add these to global build.properties -->
	<property name="unit-testing.home" value="${dir.build-tools}/unit-testing"/>
	<property name="adito.test.classes" value="${dir.adito-server}/build/test"/>
	<property name="maverick-util.home" value="${basedir}/../maverick-util"/>
		
	<!-- Other -->
	<property name="build.debug" value="on"/>
	
	<!-- emma code coverage task definition -->
	<taskdef name="emma" classname="com.vladium.emma.emmaTask">
		<classpath location="${unit-testing.home}/emma/emma.jar"/>
		<classpath location="${unit-testing.home}/emma/emma_ant.jar"/>
	</taskdef>

	<!-- Copy and paste detector task definition -->
	<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
		<classpath location="${unit-testing.home}/pmd/pmd-4.0rc1.jar"/>
	</taskdef>
	
	<!-- FindBugs code quality task definition -->
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath location="${unit-testing.home}/findbugs/findbugs-ant.jar"/>
	</taskdef>
	
	<!-- PMD code quaility task definition -->
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
		<classpath location="${unit-testing.home}/pmd/pmd-4.0rc1.jar"/>
	</taskdef>

	<path id="build.classpath">
		<pathelement path="${dir.adito-server.build.boot}"/>
		<pathelement path="${dir.adito-server.build.server}"/>
		<pathelement path="${dir.adito-server.build.webapp}"/>
		<pathelement path="${adito.test.classes}"/>
		<pathelement path="${dir.maverick-crypto.classes}"/>
		<pathelement path="${dir.maverick-multiplex.classes}"/>
		<pathelement path="${dir.maverick-ssl.classes}"/>
		<pathelement path="${dir.maverick-util.classes}"/>

		<fileset dir="${dir.adito-server}/lib" includes="*.jar"/>
		<fileset dir="${dir.adito-server.webapp.lib}" includes="**/*.jar"/>
		<fileset dir="${dir.adito-server.build.webapp}" includes="**/*.jar"/>
		<fileset dir="${build.serverlib}">
			<include name="wrapper.jar" />
		</fileset>
	</path>
	
	<path id="test.classpath">
		<path refid="build.classpath"/>
		<pathelement path="${dir.build.classes}"/>
		<pathelement path="${adito.test.classes}"/>
		<pathelement path="${dir.adito-server.webapp}"/>
		<pathelement path="${build.webapp}"/>
		
		<fileset dir="${dir.build-tools}" includes="**/*.jar"/>
		<fileset dir="${build.serverlib}">
			<include name="wrapper.jar" />
		</fileset>
	</path>

	<target name="prepare" description="Creates the build dirs if necessary">
		<mkdir dir="${dir.build}"/>
		<mkdir dir="${dir.build.classes}"/>
		<mkdir dir="${build.output.instrumented}"/>
		<mkdir dir="${build.output.test}"/>
		<mkdir dir="${dir.build.docs}"/>
		<mkdir dir="${dir.build.dist}"/>
		<mkdir dir="${dir.build.release}"/>
		<mkdir dir="${dir.build.extension}"/>
	</target>

	<target name="compile" description="Compile the extension" depends="prepare, compile-dependencies">
		<echo>Compiling with debug ${build.debug}</echo>
		<javac srcdir="${dir.src}" destdir="${dir.build.classes}" debug="${build.debug}" source="1.5" target="1.8" includeantruntime="false" includes="**/*.java">
			<classpath refid="build.classpath"/>
		</javac>
		<echo>Copying required properties file</echo>
		<copy todir="${dir.build.classes}">
			<fileset dir="${dir.src}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>

	<target name="compile-dependencies">
		<ant inheritall="false" dir="${dir.adito-server}" target="compile"/>
		<ant inheritall="false" dir="${dir.maverick-crypto}" target="compile"/>
		<ant inheritall="false" dir="${dir.maverick-multiplex}" target="compile"/>
		<ant inheritall="false" dir="${dir.maverick-ssl}" target="compile"/>
		<ant inheritall="false" dir="${maverick-util.home}" target="compile"/>
	</target>
			
	<target name="release" description="Create the extension archive" depends="clean,dist">
		<mkdir dir="${dir.build.extension}/private"/>
		
		<echo>Copying extension files</echo>
		<copy todir="${dir.build.extension}">
			<fileset dir="extensions/${ant.project.name}">
				<include name="**/*"/>
				<exclude name="**/CVS/**/*"/>
			</fileset>
			<fileset dir="${basedir}">
				<include name="webapp/**/*"/>
				<exclude name="**/CVS/**/*"/>
			</fileset>
		</copy>
		<copy file="${dir.build.dist}/${ant.project.name}.jar" tofile="${dir.build.extension}/private/${ant.project.name}.jar"/>
		
		<echo>Creating the archive</echo>
		<mkdir dir="${dir.build.release}"/>
		<zip destfile="${dir.build.release}/${ant.project.name}.zip">
			<zipfileset dir="${dir.build.extension}" prefix="${ant.project.name}" includes="**/*"/>
		</zip>

		<echo>Generating checksums</echo>
		<checksum>
			<fileset dir="${dir.build.release}" includes="*.zip"/>
		</checksum>
	</target>

	<target name="dist" description="Build the library jar files" depends="compile">
		<mkdir dir="${dir.build.dist}"/>
		<jar jarfile="${dir.build.dist}/${ant.project.name}.jar">
			<fileset dir="${dir.build.classes}" includes="**/*"/>
		</jar>
	</target>
	
	<target name="clean-dist" depends="clean,dist"/>

	<target name="clean" description="Clean up all built files">
		<delete dir="${dir.build}" />
		<!-- <delete>
			<fileset dir="${dir.build}" includes="*.*"/>
			<fileset dir="${dir.build.classes}"/>
			<fileset dir="${build.output.instrumented}"/>
			<fileset dir="${build.output.test}"/>
			<fileset dir="${dir.build.docs}"/>
			<fileset dir="${dir.build.dist}"/>
			<fileset dir="${dir.build.release}"/>
			<fileset dir="${dir.build.extension}"/>
		</delete> -->
		<!-- <antcall target="clean-reports"/> -->
	</target>

	<target name="javadoc" description="Create API documentation">
		<mkdir dir="${dir.build.docs}/api"/>
		<javadoc sourcepath="src" defaultexcludes="yes" destdir="${dir.build.docs}/api" author="true" version="true" use="true" windowtitle="${ant.project.name}" notree="true">
			<doctitle>
				<![CDATA[<h1>Adito Community Tunnels</h1>
				<br>
				<p>This extension adds the 'Tunnels' feature to Adito.
				Tunnels allow an administrator to create secure tunnels.</p>]]>
			</doctitle>
			<bottom>
				<![CDATA[<i>Copyright &#169; 2003-2007 3SP LTD. All Rights Reserved.</i>]]>
			</bottom>
			<packageset dir="src" defaultexcludes="yes">
				<include name="com/adito/**"/>
			</packageset>
		</javadoc>
	</target>
	
	<target name="test" description="Run the various tests for this extension" depends="clean">
		<mkdir dir="${dir.build.reports}"/>
		<antcall target="test-junit"/>
		<antcall target="test-findbugs"/>
		<antcall target="test-cpd"/>
		<antcall target="test-pmd"/>
		<antcall target="test-report"/>
		<fail if="junit.test.failure" unless="run.all.tests" message="One or more JUnit tests failed, please consult the report for more information"/>
	</target>

	<target name="test-junit" description="Run the JUnit tests for this extension" depends="compile-test">
		<mkdir dir="${dir.build.reports}/${dir.build.reports.junit.xml}"/>
		
		<junit fork="yes" printsummary="yes" failureproperty="junit.test.failure" dir="${dir.adito-server}">
			<classpath>
				<pathelement path="${build.output.test}"/>				
				<pathelement path="${build.output.instrumented}"/>	
			</classpath>
			<classpath refid="test.classpath"/>

			<jvmarg value="-Demma.coverage.out.file=${dir.build.reports}/${dir.build.reports.emma.coverage}/${ant.project.name}-coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
			
			<formatter type="xml"/>
			<batchtest todir="${dir.build.reports}/${dir.build.reports.junit.xml}">
				<fileset dir="${build.output.test}">
					<include name="**/*Test*.class"/>
					<exclude name="**/*Abstract*.class"/>
					<exclude name="**/*$*.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>
	
	<target name="compile-test" description="Compile the tests" depends="compile-test-dependencies">
		<antcall target="compile">
			<param name="build.debug" value="on"/>
		</antcall>
		<antcall target="compile-emma"/>
		
		<mkdir dir="${build.output.test}"/>
		<javac destdir="${build.output.test}" srcdir="${build.test.src}" debug="true" includeantruntime="false" includes="**/*.java">
			<classpath refid="test.classpath"/>
		</javac>
		<copy todir="${build.output.test}">
			<fileset dir="${build.test.src}">
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>
	
	<target name="compile-test-dependencies" description="Compile the test dependencies for this project">
		<ant inheritall="false" dir="${dir.adito-server}" target="compile-test"/>
	</target>
	
	<target name="compile-emma" description="Instrument the classes to provide emma code coverage">
		<mkdir dir="${build.output.instrumented}"/>
		<mkdir dir="${dir.build.reports}/${dir.build.reports.emma.coverage}"/>
        <emma>
            <instr instrpath="${dir.build.classes}"
                mode="copy"
                outdir="${build.output.instrumented}"
                metadatafile="${dir.build.reports}/${dir.build.reports.emma.coverage}/${ant.project.name}-metadata.emma"
                merge="true">
            </instr>
        </emma>
	</target>
	
	<target name="test-emma" description="Test the code coverage against the JUnit tests" depends="test-junit"/>

	<target name="test-findbugs" description="Test the extension against FindBugs">
		<mkdir dir="${dir.build.reports}/${dir.build.reports.findbugs.xml}"/>

		<findbugs projectname="${ant.project.name}" 
				  home="${unit-testing.home}/findbugs"
	              output="xml:withMessages"
            	  outputFile="${dir.build.reports}/${dir.build.reports.findbugs.xml}/${ant.project.name}-findbugs-report.xml"
			  	  reportLevel="low">
			<sourcePath path="${dir.src}"/>
	      	<class location="${dir.build.classes}"/>
			<auxclasspath refid="test.classpath"/>
	    </findbugs>
	</target>

	<target name="test-cpd" description="Test the extension against the Copy and Paste Detector">
		<mkdir dir="${dir.build.reports}/${dir.build.reports.cpd.xml}"/>
		
    	<cpd minimumTokenCount="50" outputFile="${dir.build.reports}/${dir.build.reports.cpd.xml}/${ant.project.name}-cpd-report.txt">
        	<fileset dir="${dir.src}" includes="**/*.java"/>
    	</cpd>
	</target>

	<target name="test-pmd" description="Test the extension against the PMD rules">
		<mkdir dir="${dir.build.reports}/${dir.build.reports.pmd.xml}"/>

		<pmd shortFilenames="true" targetjdk="1.5" rulesetfiles="${unit-testing.home}/pmd/pmd-report-all.xml">
			<fileset dir="${dir.src}" includes="**/*.java"/>
			<formatter type="xml" toFile="${dir.build.reports}/${dir.build.reports.pmd.xml}/${ant.project.name}-pmd-report.xml"/>
		</pmd>
	</target>

	<target name="test-report" description="Generate the HTML reports">
		<antcall target="test-junit-report"/>
		<antcall target="test-emma-report"/>	
		<antcall target="test-findbugs-report"/>
		<!-- antcall target="test-cpd-report"/ -->	
		<antcall target="test-pmd-report"/>	
		<antcall target="test-report-cleanup"/>	
	</target>

	<target name="test-junit-report" description="Generate the JUnit HTML report" unless="run.all.tests">
		<mkdir dir="${dir.build.reports}/${dir.build.reports.junit.html}"/>
		<junitreport todir="${dir.build.reports}/${dir.build.reports.junit}">
			<fileset dir="${dir.build.reports}/${dir.build.reports.junit.xml}" includes="TEST-*.xml"/>
			<report format="frames" todir="${dir.build.reports}/${dir.build.reports.junit.html}"/>
		</junitreport>
	</target>
	
    <target name="test-emma-report" description="Creates a code coverage report using emma stats gathered whilst running junit tests" unless="run.all.tests">
    	<mkdir dir="${dir.build.reports}/${dir.build.reports.emma.html}"/>
    	<emma>
            <report sourcepath="${dir.src}" sort="+block,+name,+method,+class" metrics="method:70,block:80,line:80,class:100">
                <fileset dir="${dir.build.reports}/${dir.build.reports.emma.coverage}" includes="${ant.project.name}-*.emma"/>
                <html outfile="${dir.build.reports}/${dir.build.reports.emma.html}/${ant.project.name}-coverage.html" depth="method" columns="name,class,method,block,line"/>
            </report>
        </emma>
    </target>

	<target name="test-findbugs-report" description="Generate the FindBugs HTML report">
		<mkdir dir="${dir.build.reports}/${dir.build.reports.findbugs.html}"/>
		<xslt in="${dir.build.reports}/${dir.build.reports.findbugs.xml}/${ant.project.name}-findbugs-report.xml" style="${unit-testing.home}/findbugs/fancy.xsl" out="${dir.build.reports}/${dir.build.reports.findbugs.html}/${ant.project.name}-findbugs-report.html"/>
    </target>

	<target name="test-cpd-report" description="Generate the Copy and Paste detector HTML report">
		<mkdir dir="${dir.build.reports}/${dir.build.reports.cpd.html}"/>
		<xslt in="${dir.build.reports}/${dir.build.reports.cpd.xml}/${ant.project.name}-cpd-report.txt" style="${unit-testing.home}/pmd/cpdhtml.xslt" out="${dir.build.reports}/${dir.build.reports.cpd.html}/${ant.project.name}-cpd-report.html"/>
    </target>

	<target name="test-pmd-report" description="Generate the PMD HTML report">
		<mkdir dir="${dir.build.reports}/${dir.build.reports.pmd.html}"/>
		<xslt in="${dir.build.reports}/${dir.build.reports.pmd.xml}/${ant.project.name}-pmd-report.xml" style="${unit-testing.home}/pmd/wz-pmd-report.xslt" out="${dir.build.reports}/${dir.build.reports.pmd.html}/${ant.project.name}-pmd-report.html"/>
    </target>

    <target name="test-report-cleanup" description="Removes all the generated report meta-data, leaving behind the useful reports" unless="run.all.tests">
		<delete>
			<fileset dir="${dir.build.reports}/${dir.build.reports.junit}" includes="*.*"/>
			<fileset dir="${dir.build.reports}/${dir.build.reports.junit.xml}"/>
			<fileset dir="${dir.build.reports}/${dir.build.reports.emma.coverage}"/>
			<fileset dir="${dir.build.reports}/${dir.build.reports.findbugs.xml}"/>
			<fileset dir="${dir.build.reports}/${dir.build.reports.pmd.xml}"/>
		</delete>	
	
		<copy todir="${dir.build.reports}/${dir.build.reports.junit}">
			<fileset dir="${dir.build.reports}/${dir.build.reports.junit.html}" includes="**/*"/>
		</copy>
		<copy todir="${dir.build.reports}/${dir.build.reports.emma}">
			<fileset dir="${dir.build.reports}/${dir.build.reports.emma.html}" includes="**/*"/>
		</copy>
		<copy todir="${dir.build.reports}/${dir.build.reports.findbugs}">
			<fileset dir="${dir.build.reports}/${dir.build.reports.findbugs.html}" includes="**/*"/>
		</copy>
		<copy todir="${dir.build.reports}/${dir.build.reports.pmd}">
			<fileset dir="${dir.build.reports}/${dir.build.reports.pmd.html}" includes="**/*"/>
		</copy>

		<delete>
			<fileset dir="${dir.build.reports}/${dir.build.reports.junit.html}"/>
			<fileset dir="${dir.build.reports}/${dir.build.reports.emma.html}"/>
			<fileset dir="${dir.build.reports}/${dir.build.reports.findbugs.html}"/>            
			<fileset dir="${dir.build.reports}/${dir.build.reports.pmd.html}"/>
		</delete>            
    </target>
	
	<target name="clean-reports" unless="run.all.tests">
		<delete>
			<fileset dir="${dir.build.reports}"/>
		</delete>
	</target>

</project>
